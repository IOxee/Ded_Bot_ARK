import time, asyncio, random, string, json, os, discord, discord.ext

#from keep_alive import keep_alive
#from discord.utils import get
from discord.ext import commands, tasks
#from discord.ext.commands import has_permissions, CheckFailure, check
from discord_slash import SlashCommand
from discord_slash import SlashContext
from discord_slash.utils import manage_commands
from discord_slash.utils.manage_commands import create_option
with open('config.json') as f:
    config = json.load(f)

#Define our bot
client = discord.Client()
client = commands.Bot(command_prefix="DED!")
slash = SlashCommand(client, sync_commands=True)
lang = config["messages"]


@client.event
async def on_ready():
    await client.change_presence(
        status=discord.Status.online,
        activity=discord.Game(name='Viendo DEDSAFIO ARK'))
    print("Bot online")


counter = 0


def generate_random_string(length):
    letters = string.ascii_letters + string.digits
    return ''.join(random.choice(letters) for _ in range(length))


def has_permisions(sender_id):
    if str(sender_id) in config["allowed_ids"]:
        return True
    else:
        return False


#Send message "pong" when user sends /ping
@slash.slash(
    name="ruleta",
    description="Ruletas evento",
    options=[
        create_option(name="tipo_ruleta",
                      description="Que tipo de ruleta quieres ejecutar?",
                      option_type=3,
                      required=True,
                      choices=[
                          manage_commands.create_choice(name="Tufon",
                                                        value="Tufon"),
                          manage_commands.create_choice(name="ADN",
                                                        value="ADN")
                      ]),
        create_option(name="duracion_ruleta",
                      description="Por favor seleciona una opcion de tiempo!",
                      option_type=3,
                      required=True,
                      choices=[
                          manage_commands.create_choice(name="30 min",
                                                        value="1800"),
                          manage_commands.create_choice(name="25 min",
                                                        value="1500"),
                          manage_commands.create_choice(name="20 min",
                                                        value="1200"),
                          manage_commands.create_choice(name="15 min",
                                                        value="900"),
                          manage_commands.create_choice(name="10 min",
                                                        value="600"),
                          manage_commands.create_choice(name="5 min",
                                                        value="300"),
                          manage_commands.create_choice(name="4 min",
                                                        value="240"),
                          manage_commands.create_choice(name="3 min",
                                                        value="180"),
                          manage_commands.create_choice(name="2 min",
                                                        value="120"),
                          manage_commands.create_choice(name="1 min",
                                                        value="60"),
                          manage_commands.create_choice(name="30 seg",
                                                        value="30")
                      ]),
        create_option(
            name="tempo_repeticion",
            description=
            "Por favor seleciona una de las siguientes opciones de repeticion",
            option_type=3,
            required=True,
            choices=[
                manage_commands.create_choice(name="30 min", value="1800"),
                manage_commands.create_choice(name="25 min", value="1500"),
                manage_commands.create_choice(name="20 min", value="1200"),
                manage_commands.create_choice(name="15 min", value="900"),
                manage_commands.create_choice(name="10 min", value="600"),
                manage_commands.create_choice(name="5 min", value="300"),
                manage_commands.create_choice(name="4 min", value="240"),
                manage_commands.create_choice(name="3 min", value="180"),
                manage_commands.create_choice(name="2 min", value="120"),
                manage_commands.create_choice(name="1 min", value="60"),
                manage_commands.create_choice(name="30 seg", value="30"),
                manage_commands.create_choice(name="Sin repeticion", value="0")
            ])
    ])
async def _help(ctx: SlashContext, tipo: str, duracion: str, repeticion: str):
    if str(ctx.author.id) in config["allowed_ids"]:
        if str(ctx.author.id) in config["eventos_config"].get(tipo.lower(
        ))["has_permission"] or config["eventos_config"].get(
                tipo.lower())["has_permission"] == "allowed":
            duracion = int(duracion)
            minutos = int(duracion / 60)
            repeticion = int(repeticion)
            if repeticion > 1:
                repeticion = int(repeticion)
            else:
                repeticion = duracion

            if duracion > 1800:
                await ctx.send("Duración máxima de 30 minutos permitida.")
            else:
                await ctx.send(f"Se mandaran pong durante {minutos} minutos")
                if config["eventos_config"].get(tipo.lower())["delay"]:
                    await asyncio.sleep(config["eventos_config"].get(
                        tipo.lower())["delay"])

                    while duracion > 0:
                        await ctx.send("¡Pong!")
                        for message in config["eventos_config"].get(
                                tipo.lower())["messages"]:
                            await ctx.send(message)

                        # Reduce la duración restante por la cantidad de tiempo de repetición
                        duracion -= repeticion

                        # Espera el tiempo de repetición entre cada repetición
                        await asyncio.sleep(repeticion)
                else:
                    while duracion > 0:
                        await ctx.send("¿PONG?")
                        duracion -= repeticion
                        await asyncio.sleep(repeticion)
        else:
            await ctx.send(lang.get("donthavepermissions_roulette_type"))
    else:
        await ctx.send(lang.get("donthavepermisions"))



@slash.slash(
    name="randomruleta",
    description=
    "Confias en la monstruosidad de Black para decidir el destino del server!",
    options=[
        create_option(name="duracion_ruleta",
                      description="Por favor seleciona una opcion de tiempo!",
                      option_type=3,
                      required=True,
                      choices=[
                          manage_commands.create_choice(name="30 min",
                                                        value="1800"),
                          manage_commands.create_choice(name="25 min",
                                                        value="1500"),
                          manage_commands.create_choice(name="20 min",
                                                        value="1200"),
                          manage_commands.create_choice(name="15 min",
                                                        value="900"),
                          manage_commands.create_choice(name="10 min",
                                                        value="600"),
                          manage_commands.create_choice(name="5 min",
                                                        value="300"),
                          manage_commands.create_choice(name="4 min",
                                                        value="240"),
                          manage_commands.create_choice(name="3 min",
                                                        value="180"),
                          manage_commands.create_choice(name="2 min",
                                                        value="120"),
                          manage_commands.create_choice(name="1 min",
                                                        value="60"),
                          manage_commands.create_choice(name="30 seg",
                                                        value="30")
                      ]),
        create_option(
            name="tempo_repeticion",
            description=
            "Por favor seleciona una de las siguientes opciones de repeticion",
            option_type=3,
            required=True,
            choices=[
                manage_commands.create_choice(name="30 min", value="1800"),
                manage_commands.create_choice(name="25 min", value="1500"),
                manage_commands.create_choice(name="20 min", value="1200"),
                manage_commands.create_choice(name="15 min", value="900"),
                manage_commands.create_choice(name="10 min", value="600"),
                manage_commands.create_choice(name="5 min", value="300"),
                manage_commands.create_choice(name="4 min", value="240"),
                manage_commands.create_choice(name="3 min", value="180"),
                manage_commands.create_choice(name="2 min", value="120"),
                manage_commands.create_choice(name="1 min", value="60"),
                manage_commands.create_choice(name="30 seg", value="30"),
                manage_commands.create_choice(name="Sin repeticion", value="0")
            ])
    ])
async def _randomruleta(ctx: SlashContext, duracion: str, repeticion: str):
    #random_type=random.choice(config["tipo_ruleta"])
    if str(ctx.author.id) in config["allowed_random"]:
        duracion = int(duracion)
        minutos = int(duracion / 60)
        repeticion = int(repeticion)
        if repeticion > 1:
            repeticion = int(repeticion)
        else:
            repeticion = duracion

        if duracion > 1800:
            await ctx.send("Duración máxima de 30 minutos permitida.")
        else:
            await ctx.send(f"Se mandaran pong durante {minutos} minutos")
            await ctx.send(config["eventos_config"].get(tipo.lower())["delay"])
            if config["eventos_config"].get(tipo.lower())["delay"]:
                await asyncio.sleep(config["eventos_config"].get(
                    tipo.lower())["delay"])

                while duracion > 0:
                    await ctx.send("¡Pong!")
                    for message in config["eventos_config"].get(
                            tipo.lower())["messages"]:
                        await ctx.send(message)

                    # Reduce la duración restante por la cantidad de tiempo de repetición
                    duracion -= repeticion

                    # Espera el tiempo de repetición entre cada repetición
                    await asyncio.sleep(repeticion)
            else:
                while duracion > 0:
                    await ctx.send("¿PONG?")
                    duracion -= repeticion
                    await asyncio.sleep(repeticion)
    else:
        await ctx.send(
            content="Haciendo un random para selecionar un tipo de ruleta!")
        await asyncio.sleep(5)
        await ctx.send(
            "Ha salido Server Crash que bien! Una ruleta interesante! \nEspero que te arrepientas de lo que estas haciendo"
        )
        await asyncio.sleep(5)
        await ctx.send(
            "HAHAHHA TE HAS CAGADO VERDAD?\n\nERA BROMA ESTAMOS EN DESAROLLO! \nPD: No tienes permisos!"
        )


@slash.slash(
    name="clear",
    description="Limpia el discord de los deschos humanos llamados mensajes",
    options=[
        create_option(
            name="cantidad",
            description=
            "Introduce una cantidad de recogedores que quieres comprar!",
            option_type=3,
            required=True),
    ])
async def clear(ctx, amount: str):
    if str(ctx.author.id) in config["allowed_ids"]:
        await ctx.send(
            "Se eliminaran todos los desechos! Gracias por usar basurerias Paco"
        )
        await asyncio.sleep(3)
        await ctx.channel.purge(limit=int(amount))
    else:
        await ctx.send(lang.get("donthavepermisions"))


@slash.slash(
    name="serverchat",
    description=
    "Pues hace lo que su nombre indica mandar un mensaje por el chat del servidor",
    options=[
        create_option(
            name="texto",
            description=
            "Repuesta que esto le afecta el limite de caracteres de discord y los permitidos por el propio juego!",
            option_type=3,
            required=True),
    ])
async def serverchat(ctx, text: str):
    if str(ctx.author.id) in config["allowed_ids"]:
        try:
            async with Client(config["rcon"]["host"], config["rcon"]["port"], config["rcon"]["rcon_password"]) as client:
				
    else:
        await ctx.send(lang.get("donthavepermisions"))


@slash.slash(
    name="broadcast",
    description=
    "Pues hace lo que su nombre indica mandar un broadcast en el server",
    options=[
        create_option(
            name="texto",
            description=
            "Repuesta que esto le afecta el limite de caracteres de discord y los permitidos por el propio juego!",
            option_type=3,
            required=True)
    ])
async def broadcast(ctx, text: str):
    if str(ctx.author.id) in config["allowed_ids"]:
        await ctx.send(text)

# send broadcast!
    else:
        await ctx.send(lang.get("donthavepermisions"))


@slash.slash(name="joinvoice",
             description="this is a test for voice channel join",
             options=[
                 create_option(name="channel",
                               description="please sleect channel",
                               option_type=7,
                               required=True)
             ])
async def joinvoice(ctx, channel):
    if str(ctx.author.id) in config["allowed_ids"]:
        await channel.connect()
    else:
        await ctx.send(lang.get("donthavepermisions"))


@slash.slash(
    name="help",
    description=
    "Esto te proporcionara un poco de ayuda segun los comandos disponibles",
)
async def help(ctx):
    emb = discord.Embed(title="Ayuda!")


# LAS TABULACION PETAN EL CODIGO SOLO SE PUEDE USAR ESPACIOS COMO ESTO "    " 4 ESPACIOS SIMULAN UNA TABULACION

#Run our bot
client.run(os.getenv("TOKEN"))
